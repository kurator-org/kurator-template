#####################################################################################
# dwca_term_values.yaml
#####################################################################################
#
# Example command-line usage:
# kurator -f dwca_term_values.yaml
#         -p url=http://ipt.vertnet.org:8080/ipt/archive.do?r=ccber_mammals
#         -l DEBUG (optional)
#
# Requires:
# jython pip install requests
# jython pip install python-dwca-reader
# jython pip install py
#
#####################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "John Wieczorek"
# __copyright__ = "Copyright 2016 President and Fellows of Harvard College"
# __version__ = "dwca_term_values.yaml 2016-06-11T20:32-03:00"

imports:

- classpath:/org/kurator/akka/types.yaml

components:

# Inline python actor to demonstrate making a workspace on the fly to use for
# writing temporary workflow artifacts.
- id: MakeWorkspace
  type: PythonActor
  properties:
    code: |
        import uuid
        import os
        def on_start(options):
            print 'Started MakeWorkspace'
            print 'MakeWorkspace options: %s' % options
            if options.has_key('workspace') == False:
                options['workspace'] ='./workspace_'+str(uuid.uuid1())
                if not os.path.exists(options['workspace']):
                    os.makedirs(options['workspace'])
            return options

# Template actor prints the names of the output and input files. See ../actor_template.py for implementation.
- id: PythonTemplateActor
  type: PythonActor
  properties:
    module: kurator_template.actor_template
    onData: dostuffer
    inputs:
        inputfile: inputfile
        workspace : workspace
    listensTo:
      - !ref MakeWorkspace

# Inline python actor to demonstrate actor iteration. Passes an options dictionary
# including the source tsv file and prints each record on a line as ouput to the console.
- id: OutputRecords
  type: PythonActor
  properties:
    code: |
        import csv
        import uuid
        def on_data(options):
            print 'Started OutputRecords'
            print 'OutputRecords options: %s' % options

            # Open the csv file, detect dialect and print out rows
            with open(options['inputfile'], 'rU') as csvfile:
                dialect = csv.Sniffer().sniff(csvfile.read(1024))

                csvfile.seek(0)
                reader = csv.reader(csvfile, dialect)

                for row in reader:
                    print ', '.join(row)

            # Construct the output file path in the workspace
            workspace = options['workspace']
            outputfile = '%s/%s' % (workspace.rstrip('/'), 'hello_'+str(uuid.uuid1())+'.csv')

            # Write a new csv file containg two columns 'hello' and 'world'
            with open(outputfile, 'wb') as csvfile:
                writer = csv.writer(csvfile, delimiter=' ',
                                    quotechar='|', quoting=csv.QUOTE_MINIMAL)
                writer.writerow(['Hello', 'World'])

            # Response dictionary
            return {'workspace' : workspace, 'outputfile' : outputfile}
    inputs:
        outputfile: inputfile
        workspace: workspace
    listensTo:
      - !ref PythonTemplateActor

- id: WrapUp
  type: PythonActor
  properties:
    code: |
        def on_data(options):
            print 'WrapUp options: %s' % options
            print '### Finished Python Template Workflow ###'
    inputs:
        workspace: workspace
        outputfile: outputfile
    listensTo:
      - !ref OutputRecords

- id: DwCAVocabExtractor
  type: Workflow
  properties:
    actors:
      - !ref MakeWorkspace
      - !ref PythonTemplateActor
      - !ref OutputRecords
      - !ref WrapUp
    parameters:
       in:
         actor: !ref MakeWorkspace
         parameter: inputfile
       workspace:
         actor: !ref MakeWorkspace
         parameter: inputfile